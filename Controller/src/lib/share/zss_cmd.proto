syntax = "proto3";
import "zss_cmd_type.proto";
package ZSS.New;

message Robots_Status{
    repeated Robot_Status robots_status = 1;
}
enum Team{
    UNKNOWN = 0;
    BLUE = 1;
    YELLOW = 2;
}
// use to multicast in LAN
message Multicast_Status{
    string ip = 1;
    string uuid = 2;
    Team team = 3;
    int32 robot_id = 4;
    // battery voltage
    float battery = 5;
    // capacitance
    float capacitance = 6;
    string firmware_version = 7;
    string firmware_build_time = 8;
}

message Robot_Status {
    int32 robot_id = 1;
    // infrared sensor with elasped time , positive means infrared is detected
    float infrared = 2;
    // elasped time since last kick
    float flat_kick = 3;
    // elasped time since last chip
    float chip_kick = 4;
    // imu angle
    float imu_theta = 5;
    // battery voltage
    float battery = 6;
    // capacitance
    float capacitance = 7;
    // odom of imu
    Odom odom = 8;
    // wheel encoder value
    repeated float wheel_encoder = 9;
    // team
    Team team = 10;
}

message Robots_Command {
    repeated Robot_Command command = 1;
    // delay * 0.1ms
    optional int32 delay = 2;
}

message Robot_Command {
    // The unique ID of the robot, as identified by SSL-Vision.
    int32 robot_id = 1;
    enum KickMode {
        NONE = 0;
        KICK = 1;
        CHIP = 2;
    }
    KickMode kick_mode = 2;
    // use for sim / just store for debug
    // if kick_mode == KICK, power means kick speed m/s
    // if kick_mode == CHIP, power means chip distance m
    float desire_power = 3;
    // use for real robot
    float kick_discharge_time = 4; // us
    // dribble PWM -1 ~ 1
    float dribble_spin = 5;
    bool need_report = 6;
    enum CmdType {
        STOP = 0;
        CMD_WHEEL = 1;
        CMD_VEL = 2;
        CMD_POSE = 3;
        CMD_CHASE = 4;
    }
    CmdType cmd_type = 7;
    CmdVel cmd_vel = 8;
    CmdPose cmd_pose = 9;
    CmdChase cmd_chase = 10;
    CmdWheel cmd_wheel = 11;
    enum CommType {
        DEFAULT = 0;
        SERIAL = 1;
        UDP_24L01 = 2;
        UDP_WIFI = 3;
    }
    CommType comm_type = 12;
}